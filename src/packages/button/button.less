@wtf: .wtf-button;
// clean the user-agent style sheet
@{wtf} {
	margin: 0;
	padding: 0;
	border: none;
	outline: none;
	background: transparent;
	font-family: inherit;
}
@{wtf} {
	max-width: 100%;
	border-radius: .25em;
	font-size: 1rem;
	line-height: 1.25;
	cursor: pointer;
	&--type-default {
		&@{wtf}--priority-primary { .priority-secondary(@color[primary-temp]) }
		&@{wtf}--priority-secondary {
			.priority-secondary(@color[primary-temp]);
			background-color: transparent;
			&:hover { background-color: transparent }
		}
		&@{wtf}--priority-tertiary,
		&@{wtf}--priority-quaternary { .priority-quaternary(@color[primary-temp]) }
	}
	&--type-primary {
		.priority-swtich(@color[primary-temp]);
	}
	&--type-success { .priority-swtich(@color[success-temp]) }
	&--type-warning { .priority-swtich(@color[warning-temp]) }
	&--type-error { .priority-swtich(@color[error-temp]) }
	// function to switch the priority for not-default type
	.priority-swtich(@color) {
		&@{wtf}--priority-primary { .priority-primary(@color) }
		&@{wtf}--priority-secondary { .priority-secondary(@color) }
		&@{wtf}--priority-tertiary { .priority-tertiary(@color) }
		&@{wtf}--priority-quaternary { .priority-quaternary(@color) }
	}
	.priority-primary(@color) {
		color: white;
		background-color: @color;
		box-shadow: 0 0 .3em -.15em darken($background-color, 20%);
		transition: filter .4s, background-color .4s;
		&:hover { filter: brightness(120%) }
		&:focus-visible {
			@{wtf}-container::before {
				content: "";
				position: absolute;
				inset: .0625em;
				border-radius: inherit;
				border: .125em dashed lighten($background-color, 20%);
				animation: button-focus-visible .5s infinite alternate;
			}
		}
	}
	.priority-secondary(@color) {
		.priority-tertiary(@color);
		@{wtf}-container::after {
			border: 1px solid $color;
			transition: filter .4s, background-color .4s;
		}
	}
	.priority-tertiary(@color) {
		.priority-quaternary(@color);
		background-color: fade($color, 15%);
		box-shadow: 0 0 .3em -.15em darken($color, 20%), inset 0 0 .15em -.05em fade(darken($color, 50%), 5%);
		transition: filter .4s, box-shadow .4s, background-color .4s;
		&:hover { background-color: fade($color, 7.5%) }
	}
	.priority-quaternary(@color) {
		color: @color;
		box-shadow: 0 0 .3em -.15em darken($color, 20%);
		transition: filter .4s, box-shadow .4s, background-color .4s;
		&:hover {
			filter: brightness(120%);
			box-shadow: 0 0 .3em -.15em fade(darken($color, 20%), 60%);
		}
		&:focus-visible {
			@{wtf}-container::before {
				content: "";
				position: absolute;
				inset: .0625em;
				border-radius: inherit;
				border: .125em dashed $color;
				animation: button-focus-visible .5s infinite alternate;
			}
		}
		@{wtf}-container::after {
			content: "";
			position: absolute;
			inset: 0;
			border-radius: inherit;
		}
	}
	@keyframes button-focus-visible {
		from { opacity: .5 }
		to { border: .125em dashed white }
	}

	// use &&-xxx to raise the priority
	&&-is-breathing {
		&@{wtf}--type-default,
		&@{wtf}--type-primary { .visual-effect(button-breath-primary) }
		&@{wtf}--type-success { .visual-effect(button-breath-success) }
		&@{wtf}--type-warning { .visual-effect(button-breath-warning) }
		&@{wtf}--type-error { .visual-effect(button-breath-error) }
		.visual-effect(@animation-name) {
			.visual-effect-breath {
				&::before { animation: @animation-name 2s linear infinite }
				&::after { animation: @animation-name 2s .35s linear infinite }
			}
			@keyframes button-breath-primary {
				0% { box-shadow: 0 0 0 0em fade(darken(@color[primary-temp], 20%), 30%) }
				15% { box-shadow: 0 0 0 .2em fade(darken(@color[primary-temp], 20%), 10%) }
				50% { box-shadow: 0 0 0 .6em fade(darken(@color[primary-temp], 20%), 0%) }
			}
			@keyframes button-breath-success {
				0% { box-shadow: 0 0 0 0em fade(darken(@color[success-temp], 20%), 30%) }
				15% { box-shadow: 0 0 0 .2em fade(darken(@color[success-temp], 20%), 10%) }
				50% { box-shadow: 0 0 0 .6em fade(darken(@color[success-temp], 20%), 0%) }
			}
			@keyframes button-breath-warning {
				0% { box-shadow: 0 0 0 0em fade(darken(@color[warning-temp], 20%), 30%) }
				15% { box-shadow: 0 0 0 .2em fade(darken(@color[warning-temp], 20%), 10%) }
				50% { box-shadow: 0 0 0 .6em fade(darken(@color[warning-temp], 20%), 0%) }
			}
			@keyframes button-breath-error {
				0% { box-shadow: 0 0 0 0em fade(darken(@color[error-temp], 20%), 30%) }
				15% { box-shadow: 0 0 0 .2em fade(darken(@color[error-temp], 20%), 10%) }
				50% { box-shadow: 0 0 0 .6em fade(darken(@color[error-temp], 20%), 0%) }
			}
		}
	}
	&&-is-disabled {
		opacity: .5;
		filter: grayscale(85%);
		cursor: not-allowed;
		&:hover { filter: grayscale(85%) }
		@{wtf}-container { pointer-events: none }
	}
	&&-is-loading {
		opacity: .65;
		cursor: wait;
		@{wtf}-container {
			pointer-events: none;
			@{wtf}-inner { filter: blur(.1em) }
		}
		&@{wtf}--type-default,
		&@{wtf}--type-primary { .visual-effect(@color[primary-temp]) }
		&@{wtf}--type-success { .visual-effect(@color[success-temp]) }
		&@{wtf}--type-warning { .visual-effect(@color[warning-temp]) }
		&@{wtf}--type-error { .visual-effect(@color[error-temp]) }
		&@{wtf}--priority-primary { .visual-effect(white) }
		.visual-effect(@color) {
			.visual-effect-load > .visual-effect-item {
				&:nth-child(1) { .rotate(1, @color) }
				&:nth-child(2) { .rotate(2, @color) }
				&:nth-child(3) { .rotate(3, @color) }
				&:nth-child(4) { .rotate(4, @color) }
				&:nth-child(5) { .rotate(5, @color) }
				&:nth-child(6) { .rotate(6, @color) }
				&:nth-child(7) { .rotate(7, @color) }
				&:nth-child(8) { .rotate(8, @color) }
			}
		}
		.rotate(@order, @color) {
			transform: translate(-50%) rotateZ(@order * 45deg);
			background: fade(@color, @order * 10% + 10%);
		}
	}
	&&-is-round {
		border-radius: calc(.4em * 2 + 1rem * 1.25);
	}
	&&-is-icon {
		@{wtf}-container {
			padding: .25em;
		}
		border-radius: 50%;
	}

	@{wtf}-container {
		box-sizing: border-box;
		width: 100%;
		height: 100%;
		display: inline-flex;
		justify-content: center;
		align-items: center;
		position: relative;
		padding: .25em 1em;
		border-radius: inherit;
		&::after { pointer-events: none }
		& > @{wtf}-inner {
			max-width: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
			border-radius: inherit;
			gap: .2em;
			& @{wtf}-text {
				// width: 100%;
				overflow: hidden;
				white-space: nowrap;
				text-overflow: ellipsis;
			}
			& > @{wtf}-icon,
			& > @{wtf}-char,
			& @{wtf}-option {
				width: 1.25em;
				height: 1.25em;
				display: flex;
				justify-content: center;
			}
			& > @{wtf}-icon { margin-left: -.4em }
			& @{wtf}-option { margin-right: -.4em }
		}
		& .visual-effect-click {
			box-sizing: inherit;
			position: absolute;
			inset: 0;
			border-radius: inherit;
			overflow: hidden;
		}
		& > .visual-effect-breath {
			box-sizing: inherit;
			position: absolute;
			inset: 0;
			border-radius: inherit;
			pointer-events: none;
			&::before,
			&::after {
				content: "";
				position: absolute;
				inset: 0;
				border-radius: inherit;
			}
		}
		& > .visual-effect-load {
			width: 1.4em;
			height: 1.4em;
			position: absolute;
			inset: 50%;
			transform: translate(-50%, -50%);
			animation: rotate 1.2s linear infinite;
			@keyframes rotate {
				from { transform: translate(-50%, -50%) rotateZ(0deg); }
				to { transform: translate(-50%, -50%) rotateZ(360deg); }
			}
			& > .visual-effect-item {
				width: .24em;
				height: .4em;
				position: absolute;
				top: 0;
				left: 50%;
				transform: translate(-50%);
				transform-origin: .12em .7em;
				border-radius: 1em;
			}
		}
	}

	&&-has-option {
		display: flex;
		align-items: center;
		@{wtf}-container {
			&:first-child {
				width: calc(100% - 2.45em);
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;
				padding-right: .4em;
				&::after { border-right: none; }
			}
			&:last-child {
				width: 2.45em; // padding-left .4 content 1.25 padding-right 1.2 content's margin-right -.4
				border-radius: inherit;
				border-top-left-radius: 0;
				border-bottom-left-radius: 0;
				padding-left: .4em;
				&::after { border-left: none }
			}
		}
	}
}

@wtf: .wtf-button;
@{wtf} {
	&--type-default,
	&--type-primary { .visual-effect(@color[primary-temp]) }
	&--type-default {
		&@{wtf}--priority-secondary,
		&@{wtf}--priority-tertiary { .visual-effect-lighten(@color[primary-temp]) }
	}
	&--type-success { .visual-effect(@color[success-temp]) }
	&--type-warning { .visual-effect(@color[warning-temp]) }
	&--type-error { .visual-effect(@color[error-temp]) }
	.visual-effect(@color) {
		.visual-effect-click > .visual-effect-item {
			box-sizing: border-box;
			position: absolute;
			width: 1em;
			height: 1em;
			border-radius: 50%;
			background-color: lighten(@color, 15%);
			opacity: .75;
			transform: translate(-50%, -50%);
			pointer-events: none;
			transition: width 1.5s, height 1.5s, opacity 1.5s;
		}
		&@{wtf}--priority-quaternary { .visual-effect-lighten(@color) }
	}
	.visual-effect-lighten(@color) {
		.visual-effect-click > .visual-effect-item {
			background-color: lighten(@color, 30%);
			opacity: .5;
		}
	}
}